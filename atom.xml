<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiachenwei123.github.io</id>
    <title>Gridea</title>
    <updated>2022-05-03T10:27:56.166Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiachenwei123.github.io"/>
    <link rel="self" href="https://jiachenwei123.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jiachenwei123.github.io/images/avatar.png</logo>
    <icon>https://jiachenwei123.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[通过RenderFeature实现毛玻璃效果]]></title>
        <id>https://jiachenwei123.github.io/post/tong-guo-renderfeature-shi-xian-mao-bo-li-xiao-guo/</id>
        <link href="https://jiachenwei123.github.io/post/tong-guo-renderfeature-shi-xian-mao-bo-li-xiao-guo/">
        </link>
        <updated>2022-05-03T09:53:18.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>需要实现游戏在匹配的时候，除了匹配的框以外，全屏的毛玻璃效果，效果图如下所示。<br>
<img src="https://jiachenwei123.github.io/post-images/1651572018425.png" alt="" loading="lazy"><br>
该效果分为两步<br>
1.RenderFeature实现全屏的高斯模糊<br>
2.RenderObject 控制匹配UI在后处理之后再渲染，避免被高斯模糊</p>
<!-- more -->
<p>RenderFeature实现全屏的高斯模糊：<br>
public GaussianBlurRenderPassFeature.cs :</p>
<pre><code>public class GaussianBlurRenderPassFeature : ScriptableRendererFeature
{
    [System.Serializable]
    public class BlurSettings
    {
        public RenderPassEvent renderPassEvent = RenderPassEvent.BeforeRenderingPostProcessing;
        public RenderObjects.FilterSettings filterSettings = new RenderObjects.FilterSettings();
        public Material m_VerticalBlurMat = null;
        public Material m_HorizontalBlurMat = null;
        public string textureId = &quot;_ScreenTexture&quot;;
        [Range(1, 8)]
        public int downSample = 1;
        [Range(1, 32)]
        public int blurCount = 1;
        [Range(0,0.005f)]
        public float intensity;
    }
    public BlurSettings blurSettings = new BlurSettings();
    RenderTargetHandle m_renderTargetHandle;
    GaussianBlurRenderPass m_gaussianBlurRenderPass;
    /// &lt;summary&gt;
    /// 抽象方法Create初始化
    /// &lt;/summary&gt;
    public override void Create()
    {
        RenderObjects.FilterSettings filter = blurSettings.filterSettings;
        m_gaussianBlurRenderPass = new GaussianBlurRenderPass(blurSettings.renderPassEvent, blurSettings.m_VerticalBlurMat, blurSettings.m_HorizontalBlurMat, name, blurSettings.downSample, blurSettings.blurCount, blurSettings.intensity,blurSettings.filterSettings.RenderQueueType,blurSettings.filterSettings.LayerMask);
        m_renderTargetHandle.Init(blurSettings.textureId);
    }
    /// &lt;summary&gt;
    /// 抽象方法AddRenderPasses需要将使用的参数全部传入Pass
    /// &lt;/summary&gt;
    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
    {
    
        var src = renderer.cameraColorTarget;
        var dest = m_renderTargetHandle;
        if (blurSettings.m_VerticalBlurMat == null)
        {
    
            Debug.Log(&quot;Missing VerticalBlurMat&quot;);
            return;
        }
        if (blurSettings.m_HorizontalBlurMat == null)
        {
    
            Debug.Log(&quot;Missing HorizontalBlurMat&quot;);
            return;
        }

        //传值
        m_gaussianBlurRenderPass.Setup(src, dest);
        renderer.EnqueuePass(m_gaussianBlurRenderPass);
    }
}
 所有半透明的物体都渲染完成之后，得到要做摄像机渲染的RT，之后交给GaussianBlurRenderPass来做后处理操作
</code></pre>
<p>GaussianBlurRenderPass.cs</p>
<pre><code>public class GaussianBlurRenderPass : ScriptableRenderPass
{
    private FilteringSettings m_FilteringSettings;
    public Material m_VerticalBlurMat;
    public Material m_HorizontalBlurMat;
    public FilterMode filterMode {
    get; set; }
    private int blurCount;
    private int downSample;
    private float intensity;
    private RenderTargetIdentifier source {
    get; set; }
    private RenderTargetHandle destination {
    get; set; }

    //第一次处理结果
    RenderTargetHandle m_temporaryColorTexture01;
    //第二次处理结果
    RenderTargetHandle m_temporaryColorTexture02;
    //最后的结果
    RenderTargetHandle m_temporaryColorTexture03;

    string m_ProfilerTag;
    public GaussianBlurRenderPass(RenderPassEvent renderPassEvent, Material VerticalBlurMat, Material HorizontalBlurMat, string tag, int downSample, int blurCount, float intensity,RenderQueueType renderQueueType, int layerMask)
    {
    
        this.renderPassEvent = renderPassEvent;
        m_VerticalBlurMat = VerticalBlurMat;
        m_HorizontalBlurMat = HorizontalBlurMat;
        this.downSample = downSample;
        this.blurCount = blurCount;
        this.intensity = intensity;
        m_ProfilerTag = tag;
        RenderQueueRange renderQueueRange = (renderQueueType == RenderQueueType.Transparent)
            ? RenderQueueRange.transparent
            : RenderQueueRange.opaque;
        m_FilteringSettings = new FilteringSettings(renderQueueRange, layerMask);
        m_temporaryColorTexture01.Init(&quot;_temporaryColorTexture1&quot;);
        m_temporaryColorTexture02.Init(&quot;_temporaryColorTexture2&quot;);
        m_temporaryColorTexture03.Init(&quot;_temporaryColorTexture3&quot;);
    }
    public void Setup(RenderTargetIdentifier source, RenderTargetHandle destination)
    {
    
        this.source = source;
        this.destination = destination;
    }
    public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
    {
    
        CommandBuffer cmd = CommandBufferPool.Get(m_ProfilerTag);
        RenderTextureDescriptor Desc = renderingData.cameraData.cameraTargetDescriptor;
        Desc.width = Desc.width &gt;&gt; downSample;
        Desc.height = Desc.height &gt;&gt; downSample;
        Desc.depthBufferBits = 0;
        cmd.GetTemporaryRT(m_temporaryColorTexture01.id, Desc, filterMode);
        cmd.GetTemporaryRT(m_temporaryColorTexture02.id, Desc, filterMode);
        cmd.GetTemporaryRT(m_temporaryColorTexture03.id, Desc, filterMode);
    
        ///开始运算
        cmd.BeginSample(&quot;GaussianBlur&quot;);
        //将画面输入03
        cmd.Blit(source, m_temporaryColorTexture03.Identifier());
        //模糊次数循环
        for (int i = 0; i &lt; blurCount; i++)
        {
    
            //输入纵向位移坐标
            m_VerticalBlurMat.SetVector(&quot;_offset&quot;, new Vector2(0, intensity));
            //将03的画面通过shader运算后输入01
            cmd.Blit(m_temporaryColorTexture03.Identifier(), m_temporaryColorTexture01.Identifier(), m_VerticalBlurMat);
            //输入横向位移坐标
            m_HorizontalBlurMat.SetVector(&quot;_offset&quot;, new Vector2(intensity, 0));
            //将01的画面通过shader运算后输入02
            cmd.Blit(m_temporaryColorTexture01.Identifier(), m_temporaryColorTexture02.Identifier(), m_HorizontalBlurMat);
            //将02的画面输入03
            cmd.Blit(m_temporaryColorTexture02.Identifier(), m_temporaryColorTexture03.Identifier());
        }
        //输出03到画面
        cmd.Blit(m_temporaryColorTexture03.Identifier(), source);
        cmd.EndSample(&quot;GaussianBlur&quot;);
        ///

        context.ExecuteCommandBuffer(cmd);
        CommandBufferPool.Release(cmd);
    }
}
</code></pre>
<p>GaussianBlur.shader</p>
<pre><code>Shader &quot;Custom/GaussianBlur&quot;
{
    
    Properties 
    {
    
        _MainTex (&quot;ScreenTexture&quot;, 2D) = &quot;&quot; {
    }
    }
    HLSLINCLUDE
    #include &quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl&quot;
    struct a2v 
    {
    
        float4 vertex:POSITION;
        float2 texcoord:TEXCOORD0;
    };
    struct v2f 
    {
    
        float4 pos : POSITION;
        float2 uv : TEXCOORD0;
        float4 uv01 : TEXCOORD1;
        float4 uv23 : TEXCOORD2;
        float4 uv45 : TEXCOORD3;
    };

    float2 _offset;
    sampler2D _MainTex;
    //顶点着色器
    //传入的offset的值为（intensity,0,）和（0,intensity）。
    //（intensity,0,）和（0,intensity）分别为横向和纵向。
    v2f vert (a2v v) {
    
        v2f o;
        o.pos = TransformObjectToHClip(v.vertex);
        o.uv.xy = v.texcoord.xy;
        //存6个向外扩散的坐标
        o.uv01 =  v.texcoord.xyxy + _offset.xyxy * float4(1,1, -1,-1);
        o.uv23 =  v.texcoord.xyxy + _offset.xyxy * float4(1,1, -1,-1) * 2.0;
        o.uv45 =  v.texcoord.xyxy + _offset.xyxy * float4(1,1, -1,-1) * 3.0;
        return o;
    }
    //片元着色器
    half4 frag (v2f i) : COLOR {
    
        //高斯模糊，也叫正态分布。重点就是权重分配，越靠近像素中心，权重越高。这里的权重，写的大概值。
        half4 color = float4 (0,0,0,0);
        color += 0.40 * tex2D (_MainTex, i.uv);
        color += 0.15 * tex2D (_MainTex, i.uv01.xy);
        color += 0.15 * tex2D (_MainTex, i.uv01.zw);
        color += 0.10 * tex2D (_MainTex, i.uv23.xy);
        color += 0.10 * tex2D (_MainTex, i.uv23.zw);
        color += 0.05 * tex2D (_MainTex, i.uv45.xy);
        color += 0.05 * tex2D (_MainTex, i.uv45.zw);
        //输出屏幕
        return color;
    }
    ENDHLSL
    //执行pass
    Subshader 
    {
    
        Pass 
        {
    
            HLSLPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            ENDHLSL
        }
    }
}
</code></pre>
<p>2.匹配UI应该在所有后处理完成之后才被渲染，所以通过改变它的渲染顺序，这里我使用RenderObject来实现，给匹配UI单独分一个Layer：UIWithoutPP<br>
修改该Layer的渲染顺序到后处理之后，如下图：<br>
<img src="https://jiachenwei123.github.io/post-images/1651573305960.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决RT无法接受后处理的问题]]></title>
        <id>https://jiachenwei123.github.io/post/jie-jue-rt-wu-fa-jie-shou-hou-chu-li-de-wen-ti/</id>
        <link href="https://jiachenwei123.github.io/post/jie-jue-rt-wu-fa-jie-shou-hou-chu-li-de-wen-ti/">
        </link>
        <updated>2022-04-22T02:52:18.000Z</updated>
        <content type="html"><![CDATA[<p>问题原因：<br>
PostProcessing 会修改RT的Alhpa通道，使其变成不透明的。</p>
<p>解决思路：<br>
得到正确的Alhpa值来修正。</p>
<p>解决方法：<br>
新建一个与原先一模一样的相机，修改关闭后处理，并将其渲染到另一张RT上(FixRT),在shader中传入原先的OriRT(经过后处理)和FixRT(未经过后处理)，分别采样两张RT，输出OriRT的rgb通道和FixRT的a通道，注意需要开启透明度混合，而且SolidColor要调整成纯黑色。</p>
<p>以下是shader代码</p>
<pre><code>Shader &quot;Unlit/fixShader&quot;
{
    Properties
    {
        _BaseMap(&quot;MainTex&quot;, 2D) = &quot;White&quot; {}
        _MaskMap(&quot;Mask&quot;, 2D) = &quot;White&quot;{}
    }

    SubShader
    {
    // URP的shader要在Tags中注明渲染管线是UniversalPipeline
    Tags
    {
        &quot;RanderPipline&quot; = &quot;UniversalPipeline&quot;
        &quot;RanderType&quot; = &quot;Transparent&quot;
    }
    
    Blend One OneMinusSrcAlpha

    HLSLINCLUDE

        // 引入Core.hlsl头文件，替换UnityCG中的cginc
        #include &quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl&quot;

        // 将不占空间的材质相关变量放在CBUFFER中，为了兼容SRP Batcher
        CBUFFER_START(UnityPerMaterial)
            float4 _BaseMap_ST;
            float4 _MaskMap_ST;
        CBUFFER_END

    

        // 材质单独声明，使用DX11风格的新采样方法
        TEXTURE2D (_BaseMap);
        SAMPLER(sampler_BaseMap);

        TEXTURE2D (_MaskMap);
        SAMPLER(sampler_MaskMap);

        struct Attributes
        {
            float4 positionOS : POSITION;
            float2 uv         : TEXCOORD0;
        };

        struct Varyings
        {
            float4 positionCS : SV_POSITION;
            float2 uv         : TEXCOORD0;
        };

    ENDHLSL

    Pass
    {
        // 声明Pass名称，方便调用与识别
        Name &quot;ForwardUnlit&quot;
        Tags {&quot;LightMode&quot; = &quot;UniversalForward&quot;}

        HLSLPROGRAM

            // 声明顶点/片段着色器对应的函数
            #pragma vertex vert
            #pragma fragment frag

            // 顶点着色器
            Varyings vert(Attributes input)
            {
                // GetVertexPositionInputs方法根据使用情况自动生成各个坐标系下的定点信息
                const VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);

                Varyings output;
                output.uv = TRANSFORM_TEX(input.uv, _BaseMap);
                output.positionCS = vertexInput.positionCS;
                return output;
            }

            // 片段着色器
            half4 frag(Varyings input) : SV_Target
            {
                return half4(SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv).rgb,SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, input.uv).a);
            }
        
        ENDHLSL
    }
 }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jiachenwei123.github.io/post/hello-gridea/</id>
        <link href="https://jiachenwei123.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>